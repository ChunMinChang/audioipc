From b6b0d50f4021dedeaf53f8d82fc81902eaf74172 Mon Sep 17 00:00:00 2001
From: Dan Glastonbury <dan.glastonbury@gmail.com>
Date: Wed, 9 Aug 2017 18:05:32 +1000
Subject: Bug XXX - P7: Enable cubeb remoting through configure.

--enable-cubeb-remoting

MozReview-Commit-ID: 7xTShZIOeRI

diff --git a/dom/media/CubebUtils.cpp b/dom/media/CubebUtils.cpp
index e7c09cd..b4dc6a1 100644
--- a/dom/media/CubebUtils.cpp
+++ b/dom/media/CubebUtils.cpp
@@ -61,6 +61,7 @@ namespace mozilla {
 
 namespace {
 
+#ifdef MOZ_CUBEB_REMOTING
 ////////////////////////////////////////////////////////////////////////////////
 // Cubeb Sound Server Thread
 void* sServerHandle = nullptr;
@@ -81,6 +82,7 @@ ShutdownSoundServer()
   audioipc_server_stop(sServerHandle);
   sServerHandle = nullptr;
 }
+#endif // MOZ_CUBEB_REMOTING
 
 ////////////////////////////////////////////////////////////////////////////////
 
@@ -245,7 +247,9 @@ void PrefChanged(const char* aPref, void* aClosure)
       PodCopy(sCubebBackendName.get(), value.get(), value.Length());
       sCubebBackendName[value.Length()] = 0;
     }
-  } else if (strcmp(aPref, PREF_CUBEB_SANDBOX) == 0) {
+  }
+#ifdef MOZ_CUBEB_REMOTING
+  else if (strcmp(aPref, PREF_CUBEB_SANDBOX) == 0) {
     bool cubebSandbox = false;
     Preferences::GetBool(PREF_CUBEB_SANDBOX, &cubebSandbox);
     MOZ_LOG(gCubebLog, LogLevel::Verbose, ("%s: %s", PREF_CUBEB_SANDBOX, cubebSandbox ? "true" : "false"));
@@ -255,6 +259,7 @@ void PrefChanged(const char* aPref, void* aClosure)
       StartSoundServer();
     }
   }
+#endif
 }
 
 bool GetFirstStream()
@@ -389,9 +394,13 @@ cubeb* GetCubebContextUnlocked()
   bool cubebSandbox = MediaPrefs::CubebSandbox();
   MOZ_LOG(gCubebLog, LogLevel::Info, ("%s: %s", PREF_CUBEB_SANDBOX, cubebSandbox ? "true" : "false"));
 
+#ifdef MOZ_CUBEB_REMOTING
   int rv = (cubebSandbox)
     ? audioipc_client_init(&sCubebContext, sBrandName)
     : cubeb_init(&sCubebContext, sBrandName, sCubebBackendName.get());
+#else // !MOZ_CUBEB_REMOTING
+  int rv = cubeb_init(&sCubebContext, sBrandName, sCubebBackendName.get());
+#endif // MOZ_CUBEB_REMOTING
   NS_WARNING_ASSERTION(rv == CUBEB_OK, "Could not get a cubeb context.");
   sCubebState =
     (rv == CUBEB_OK) ? CubebState::Initialized : CubebState::Uninitialized;
diff --git a/toolkit/library/rust/Cargo.toml b/toolkit/library/rust/Cargo.toml
index fd566872..a719bac 100644
--- a/toolkit/library/rust/Cargo.toml
+++ b/toolkit/library/rust/Cargo.toml
@@ -14,6 +14,7 @@ gecko_debug = ["gkrust-shared/gecko_debug"]
 simd-accel = ["gkrust-shared/simd-accel"]
 no-static-ideograph-encoder-tables = ["gkrust-shared/no-static-ideograph-encoder-tables"]
 # parallel-utf8 = ["gkrust-shared/parallel-utf8"]
+cubeb-remoting = ["gkrust-shared/cubeb-remoting"]
 
 [dependencies]
 gkrust-shared = { path = "shared" }
diff --git a/toolkit/library/rust/gkrust-features.mozbuild b/toolkit/library/rust/gkrust-features.mozbuild
index 172d70a..5c66011 100644
--- a/toolkit/library/rust/gkrust-features.mozbuild
+++ b/toolkit/library/rust/gkrust-features.mozbuild
@@ -23,4 +23,7 @@ if CONFIG['MOZ_PULSEAUDIO']:
 if CONFIG['MOZ_RUST_SIMD']:
     gkrust_features += ['simd-accel']
 
+if CONFIG['MOZ_CUBEB_REMOTING']:
+    gkrust_features += ['cubeb-remoting']
+
 gkrust_features += ['no-static-ideograph-encoder-tables']
diff --git a/toolkit/library/rust/shared/Cargo.toml b/toolkit/library/rust/shared/Cargo.toml
index fd2a9e4..2efb787 100644
--- a/toolkit/library/rust/shared/Cargo.toml
+++ b/toolkit/library/rust/shared/Cargo.toml
@@ -13,16 +13,20 @@ nserror = { path = "../../../../xpcom/rust/nserror" }
 rust_url_capi = { path = "../../../../netwerk/base/rust-url-capi" }
 webrender_bindings = { path = "../../../../gfx/webrender_bindings", optional = true }
 cubeb-pulse = { path = "../../../../media/libcubeb/cubeb-pulse-rs", optional = true, features=["pulse-dlopen"] }
+cubeb-core = { path = "../../../../media/cubeb-rs/cubeb-core", optional = true }
+cubeb = { path = "../../../../media/cubeb-rs/cubeb-api", optional = true }
+cubeb-backend = { path = "../../../../media/cubeb-rs/cubeb-backend", optional = true }
 encoding_c = "0.7.1"
 encoding_glue = { path = "../../../../intl/encoding_glue" }
-audioipc-client = { path = "../../../../media/audioipc/client" }
-audioipc-server = { path = "../../../../media/audioipc/server" }
+audioipc-client = { path = "../../../../media/audioipc/client", optional = true }
+audioipc-server = { path = "../../../../media/audioipc/server", optional = true }
 
 [features]
 default = []
 bindgen = ["geckoservo/bindgen"]
 servo = ["geckoservo"]
 quantum_render = ["webrender_bindings"]
+cubeb-remoting = ["cubeb-core", "cubeb", "cubeb-backend", "audioipc-client", "audioipc-server"]
 cubeb_pulse_rust = ["cubeb-pulse"]
 gecko_debug = ["geckoservo/gecko_debug"]
 simd-accel = ["encoding_c/simd-accel", "encoding_glue/simd-accel"]
diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index 82853060..4e9fe26 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -1238,3 +1238,17 @@ def code_coverage(value):
 
 set_config('MOZ_CODE_COVERAGE', code_coverage)
 set_define('MOZ_CODE_COVERAGE', code_coverage)
+
+# Cubeb Audio Remoting
+# ==============================================================
+
+option('--enable-cubeb-remoting', env='MOZ_CUBEB_REMOTING',
+       help='Enable cubeb audio remoting')
+
+@depends('--enable-cubeb-remoting')
+def cubeb_remoting(value):
+    if value:
+        return True
+
+set_config('MOZ_CUBEB_REMOTING', cubeb_remoting)
+set_define('MOZ_CUBEB_REMOTING', cubeb_remoting)
-- 
2.10.2

